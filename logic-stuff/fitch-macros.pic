.EQ
sdefine falsum  %{type "operator" \[pp]}%
sdefine not     %{type "operator" \[no]}%
sdefine and     %{type "operator" \[AN]}%
sdefine or      %{type "operator" \[OR]}%
sdefine any     %{type "operator" \[fa]}%
sdefine some    %{type "operator" \[te]}%

sdefine nece %{type "operator"  vcenter \[sq]}%
sdefine possi %{type "operator"  vcenter \[lz]}%

define necessarily X { nece } X
define possibly X { possi } X

define forall X { any $1 ^ } X
define exists X { some $1 ^ } X

sdefine implies %{type "operator" vcenter \[->]}%
sdefine iff     %{type "operator" vcenter \[<>]}%
sdefine equiv   %{type "operator" vcenter \[<>]}%

sdefine therefore   %{type "operator" vcenter \[tf]}%
sdefine empty   %{type "operator" vcenter \[es]}%
sdefine member   %{type "operator" vcenter \[mo]}%
sdefine notmember   %{type "operator" vcenter \[nm]}%
sdefine subset   %{type "operator" vcenter \[ib]}%
sdefine powerset %{type "operator" vcenter \[wp]}%
sdefine identicalto %{type "operator" vcenter \[==]}%
.EN

.PS
scale=2.54
moveht=0.75
boxht=0.75
movewid=0.9

depth=0;
max_depth=1

stepno=0;
step_total=0;

define set_steps_and_depths {
	step_total = $1;
	max_depth  = $2;
	stepno=0;
}

define start_proof {$1: box invis at depth*movewid,(step_total-stepno)*moveht;
.\" This prints step numbers correctly to STDERR
.\" command ".tm $1 " sprintf("%g",stepno)
depth=depth+1;}

define line_from_to {line from $1 to $2}

define end_proof {depth=depth-1;	
move to	$1.w.x,last box.sw.y;
line to $1.w.x,$1.sw.y-0.15;}

define add_premis {add_step($1,$2,$3)}

define premis_end {move to $1.w.x,last box.sw.y; line right}

define add_step {
stepno=stepno+1;
move to $1.nw;
for i=1 to stepno do {move down;}
box invis sprintf("%g",stepno) rjust with .e at -0.1,(step_total-stepno)*moveht;
if depth == 1 then { 
box invis  $2 ljust with .c at $1.w.x+0.1,(step_total-stepno)*moveht;
} else {box invis  $2 ljust with .c at $1.w.x+0.1,(step_total-stepno)*moveht;
}
box invis $3 ljust at max_depth*movewid,(step_total-stepno)*moveht;}
.PE
